// Code generated by rpc-fuction. DO NOT EDIT.

package coreapiv1fusion

import (
	"context"
	"net/http"
	connect "connectrpc.com/connect"
	v1 "github.com/najeal/rpc-fusion/tests/gen/coreapi/v1"
)

type CommonHandler interface {
	Ping(ctx context.Context, arg *connect.Request[v1.PingRequest], res *connect.Response[v1.PingResponse]) error
}

type JsonrpcHandler interface {
	Ping(req *http.Request, arg *connect.Request[v1.PingRequest], res *connect.Response[v1.PingResponse]) error
}

type GrpcHandler interface {
	Ping(ctx context.Context, arg *connect.Request[v1.PingRequest]) (res *connect.Response[v1.PingResponse], err error)
}

func NewGrpcServer(commonHandler CommonHandler) *GrpcServer {
	return &GrpcServer{
		commonHandler: commonHandler,
	}
}

type GrpcServer struct {
	commonHandler CommonHandler
}

func (s *GrpcServer) Ping(ctx context.Context, arg *connect.Request[v1.PingRequest]) (res *connect.Response[v1.PingResponse], err error) {
	res = new(connect.Response[v1.PingResponse])
	if err := s.commonHandler.Ping(ctx, arg, res); err != nil {
		return nil, err
	}
	return res, nil
}

func NewJsonrpcServer(commonHandler CommonHandler) *JsonrpcServer {
	return &JsonrpcServer{
		commonHandler: commonHandler,
	}
}

type JsonrpcServer struct {
	commonHandler CommonHandler
}

func (s *JsonrpcServer) Ping(req *http.Request, arg *connect.Request[v1.PingRequest], res *connect.Response[v1.PingResponse]) error {
	ctx := req.Context()
	return s.commonHandler.Ping(ctx, arg, res)
}
